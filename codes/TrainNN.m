% Use labeled data to train Neural Network

%% clear command windows
clc
clear all
close all
%% read in labeled data
fid = fopen('LabelData.txt', 'r');
DataInputs = [];
DataTargets = [];
flag_read = false;
while 1
    tline = fgetl(fid);
    if ~ischar(tline)
        break;
    end
    
    if flag_read
        data_str = strsplit(tline);
        data(1) = str2double(data_str{1});
        data(2) = str2double(data_str{2});
        data(3) = str2double(data_str{3});
        data(4) = str2double(data_str{4});
        DataInputs = [DataInputs, data(1:3)'];
        DataTargets = [DataTargets, data(4)'];
    end
    
    flag_read = ~flag_read;
end
fclose(fid);
%% train
% % Solve an Input-Output Fitting problem with a Neural Network
% % Script generated by Neural Fitting app
% % Created Sat Nov 26 16:20:42 HKT 2016
% %
% % This script assumes these variables are defined:
% %
% %   DataInputs - input data.
% %   DataTargets - target data.
% 
% x = DataInputs;
% t = DataTargets;
% 
% % Choose a Training Function
% % For a list of all training functions type: help nntrain
% % 'trainlm' is usually fastest.
% % 'trainbr' takes longer but may be better for challenging problems.
% % 'trainscg' uses less memory. NFTOOL falls back to this in low memory situations.
% trainFcn = 'trainlm';  % Levenberg-Marquardt
% 
% % Create a Fitting Network
% hiddenLayerSize = 10;
% net = fitnet(hiddenLayerSize,trainFcn);
% 
% % Setup Division of Data for Training, Validation, Testing
% net.divideParam.trainRatio = 70/100;
% net.divideParam.valRatio = 15/100;
% net.divideParam.testRatio = 15/100;
% 
% % Train the Network
% [net,tr] = train(net,x,t);
% 
% % Test the Network
% y = net(x);
% e = gsubtract(t,y);
% performance = perform(net,t,y)
% 
% % View the Network
% view(net)
% 
% % Plots
% % Uncomment these lines to enable various plots.
% %figure, plotperform(tr)
% %figure, plottrainstate(tr)
% %figure, plotfit(net,x,t)
% %figure, plotregression(t,y)
% %figure, ploterrhist(e)
% 
% % Save the Network
% save net net